// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  // id              Int       @id @default(autoincrement())
  id              String      @id @default(cuid())
  name            String?
  email           String?     @unique
  emailVerified   DateTime?
  passwordHash    String?
  physicalAddress String?
  contactNumber   String? // Added: nullable contact number
  image           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  Account         Account[]
  Session         Session[]
  UserOrder       UserOrder[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserOrder {
  id      Int     @id @default(autoincrement())
  orderID String? // optional, for order grouping
  userID  String // references User table

  productID    String // SKU-like string
  productName  String
  productPrice Int
  productColor String
  productSize  String
  quantity     Int

  primaryImageSize   String? // "L", "M", "S"
  secondaryImageSize String? // "L", "M", "S"

  productFrontPath       String
  productBackPath        String?
  uploadedImagePrimary   String?
  uploadedImageSecondary String?

  status Status @default(Placed)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userID], references: [id])
}

enum Status {
  Placed
  Confirmed
  Delivered
  Cancelled
  Returned
  Processing
}
